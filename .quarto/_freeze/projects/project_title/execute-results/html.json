{
  "hash": "442a2cd7e41ee9cc6577259972209ec7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Analysis of DNA Replication Tracks\"\ndate: 2025-07-26\nauthor: Krishanu Dhar\neditor_options: \n  chunk_output_type: console\nformat: \n  html: default\npage: true\n---\n\n\n\n## Description\n\nThis quarto document summarizes and analyzes **DNA replication track** data outputted from a Snakemake Pipeline \\[[Link](https://github.com/SansamLab-Pipelines-Genomics/ReplisomeTracer)\\]. Here, I will *filter and tidy the data*, then *plot it* out independently, as well as comparitively. Further I will try to *predict labeling states* within each sample. If the model doesn't look as robust as I expected, I will *use my own algorithm to predict the states*.\n\n### About the Data\n\nThere are a couple of things that we should know about the data that we are going to use for the upcoming analyses.\n\n-   First, we have bedfiles, which consist of *read IDs and their metadata*. These read IDs are unique, because these have DNA replication footprints. These footprints actually look pretty colorful (will see them in just a few moments). To better understand, here is snap of the workflow:\n\n    ![](/projects/pictures/Workflow_Rep.png){width=\"55.6cm\"}\n\n    ### Loading the packages\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    library(here)\n    library(tidyverse)\n    library(cowplot)\n    library(zoo)\n    cat(\"Working from:\", here::here(), \"\\n\")\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    Working from: C:/Users/dhark/Documents/GitHub/Krishanu_MyStuff \n    ```\n    \n    \n    :::\n    :::\n\n\n\n    Let's have a glimpse at one of the bedfiles I mentioned above:\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    try_bed <- read_table(\n      here(\"projects\", \"data\", \"bedfiles\", \"NT\", \"leftForks_DNAscent_forkSense.bed\"),\n      comment = \"#\",\n      col_names = FALSE\n    )\n    \n    options(readr.show_col_types = FALSE)\n    # Quick look\n    glimpse(try_bed)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    Rows: 195\n    Columns: 9\n    $ X1 <chr> \"chr1\", \"chr1\", \"chr1\", \"chr1\", \"chr1\", \"chr1\", \"chr1\", \"chr1\", \"ch…\n    $ X2 <dbl> 1325962, 5853908, 11261820, 35847942, 38897717, 39298905, 44646358,…\n    $ X3 <dbl> 1332304, 5863452, 11274951, 35858135, 38910415, 39311525, 44655386,…\n    $ X4 <chr> \"64d3f3d8-4f2f-4c03-ad7d-f3268d7e47ac\", \"8e3a55a6-a88c-4c4f-b52a-70…\n    $ X5 <dbl> 1310499, 5839126, 11252034, 35847937, 38894320, 39298565, 44646339,…\n    $ X6 <dbl> 1357925, 5869143, 11326927, 35907478, 38920742, 39320633, 44667509,…\n    $ X7 <chr> \"rev\", \"rev\", \"rev\", \"fwd\", \"rev\", \"fwd\", \"rev\", \"fwd\", \"rev\", \"fwd…\n    $ X8 <dbl> 6306, 9555, 13098, 10012, 12506, 12478, 9022, 3598, 12521, 6140, 67…\n    $ X9 <dbl> 0.761731, 0.060901, 0.442901, -3.000000, -3.000000, -3.000000, -3.0…\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    # Assign proper column names\n    colnames(try_bed) <- c(\n      \"chrom\", \"fork_start\", \"fork_end\", \"read_id\",\n      \"read_start\", \"read_end\", \"strand\",\n      \"fork_length\", \"score\"\n    )\n    \n    glimpse(try_bed)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    Rows: 195\n    Columns: 9\n    $ chrom       <chr> \"chr1\", \"chr1\", \"chr1\", \"chr1\", \"chr1\", \"chr1\", \"chr1\", \"c…\n    $ fork_start  <dbl> 1325962, 5853908, 11261820, 35847942, 38897717, 39298905, …\n    $ fork_end    <dbl> 1332304, 5863452, 11274951, 35858135, 38910415, 39311525, …\n    $ read_id     <chr> \"64d3f3d8-4f2f-4c03-ad7d-f3268d7e47ac\", \"8e3a55a6-a88c-4c4…\n    $ read_start  <dbl> 1310499, 5839126, 11252034, 35847937, 38894320, 39298565, …\n    $ read_end    <dbl> 1357925, 5869143, 11326927, 35907478, 38920742, 39320633, …\n    $ strand      <chr> \"rev\", \"rev\", \"rev\", \"fwd\", \"rev\", \"fwd\", \"rev\", \"fwd\", \"r…\n    $ fork_length <dbl> 6306, 9555, 13098, 10012, 12506, 12478, 9022, 3598, 12521,…\n    $ score       <dbl> 0.761731, 0.060901, 0.442901, -3.000000, -3.000000, -3.000…\n    ```\n    \n    \n    :::\n    :::\n\n\n\n-   Second, we have multiple bedgraph files. Each read ID is associated with two bedgraph files (one for EdU and one for BrdU). Let's look at a pair of bedgraphs for a read ID.\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    brdu_bed <- read_tsv(\n      here(\"projects\", \"data\", \"bedgraphs\", \"NT\", \"BrdU__0b9d33df-6203-4c55-9ac5-c20ce628dde9.bedgraph\")\n    )\n    edu_bed <- read_tsv(\n      here(\"projects\", \"data\", \"bedgraphs\", \"NT\", \"EdU__0b9d33df-6203-4c55-9ac5-c20ce628dde9.bedgraph\")\n    )\n    \n    # Assigning column names\n    colnames(edu_bed) <- c(\"chrom\", \"start\", \"end\", \"prob_score\")\n    colnames(brdu_bed) <- c(\"chrom\", \"start\", \"end\", \"prob_score\")\n    head(brdu_bed)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 6 × 4\n      chrom   start     end prob_score\n      <chr>   <dbl>   <dbl>      <dbl>\n    1 chr16 8110549 8110649    0.00896\n    2 chr16 8110539 8110639    0.00882\n    3 chr16 8110529 8110629    0.00911\n    4 chr16 8110519 8110619    0.00947\n    5 chr16 8110509 8110609    0.00951\n    6 chr16 8110499 8110599    0.00933\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    head(edu_bed)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 6 × 4\n      chrom   start     end prob_score\n      <chr>   <dbl>   <dbl>      <dbl>\n    1 chr16 8110549 8110649      0.908\n    2 chr16 8110539 8110639      0.851\n    3 chr16 8110529 8110629      0.850\n    4 chr16 8110519 8110619      0.828\n    5 chr16 8110509 8110609      0.806\n    6 chr16 8110499 8110599      0.786\n    ```\n    \n    \n    :::\n    :::\n\n\n\nYou might have guessed it from this. These bedgraphs hold information for the probability score of EdU/BrdU (thymidine analogs) across the entire read for every 100 base pairs (bin size).\n\n## \n\n## Workflow\n\n1.  Organize and tidy the data for better clarity.\n\n2.  Plot the data\n\n3.  Try predicting the labeling states within each sample, and find out their transition points\n\n### [Organizing and tidying our data]{.underline}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ===Non-treated Sample (NT)===\nleft_df <- read_table(\n  here(\"projects\", \"data\", \"bedfiles\", \"NT\", \"leftForks_DNAscent_forkSense.bed\"),\n  comment = \"#\",\n  col_names = FALSE\n)\nright_df <- read_table(\n  here(\"projects\", \"data\", \"bedfiles\", \"NT\", \"rightForks_DNAscent_forkSense.bed\"),\n  comment = \"#\",\n  col_names = FALSE\n)\norigin_df <- read_table(\n  here(\"projects\", \"data\", \"bedfiles\", \"NT\", \"origins_DNAscent_forkSense.bed\"),\n  comment = \"#\",\n  col_names = FALSE\n)\ntermination_df <- read_table(\n  here(\"projects\", \"data\", \"bedfiles\", \"NT\", \"terminations_DNAscent_forkSense.bed\"),\n  comment = \"#\",\n  col_names = FALSE\n)\n# Set column names (Origins and Terminations have different structure)\ncolnames(left_df) <- colnames(right_df) <- c(\n  \"chrom\", \"fork_start\", \"fork_end\", \"read_id\",\n  \"read_start\", \"read_end\", \"strand\",\n  \"fork_length\", \"score\"\n)\ncolnames(origin_df) <- colnames(termination_df) <- c(\"chrom\", \"fork_start\", \"fork_end\", \"read_id\", \"read_start\", \"read_end\", \"strand\")\n\n# Merge left and right forks\nmerged_df <- rbind(left_df, right_df)\n\n# Extract read IDs\nmerged_ids <- unique(trimws(as.character(merged_df$read_id)))\nexclude_ids <- unique(trimws(as.character(c(origin_df$read_id, termination_df$read_id))))\n\n# Filter out excluded read IDs\nfiltered_ids <- setdiff(merged_ids, exclude_ids)\n\nfiltered_df_NT <- merged_df |>\n  filter(read_id %in% filtered_ids)\n\n# Optional: Exclude reads with score == -3\nfiltered_df_NT <- filtered_df_NT |> \n  filter(score != -3.000000)\n\n# ===Treated sample (Auxin)===\n\nleft_df <- read_table(\n  here(\"projects\", \"data\", \"bedfiles\", \"Auxin\", \"leftForks_DNAscent_forkSense.bed\"),\n  comment = \"#\",\n  col_names = FALSE\n)\nright_df <- read_table(\n  here(\"projects\", \"data\", \"bedfiles\", \"Auxin\", \"rightForks_DNAscent_forkSense.bed\"),\n  comment = \"#\",\n  col_names = FALSE\n)\norigin_df <- read_table(\n  here(\"projects\", \"data\", \"bedfiles\", \"Auxin\", \"origins_DNAscent_forkSense.bed\"),\n  comment = \"#\",\n  col_names = FALSE\n)\ntermination_df <- read_table(\n  here(\"projects\", \"data\", \"bedfiles\", \"Auxin\", \"terminations_DNAscent_forkSense.bed\"),\n  comment = \"#\",\n  col_names = FALSE\n)\n# Set column names (Origins and Terminations have different structure)\ncolnames(left_df) <- colnames(right_df) <- c(\n  \"chrom\", \"fork_start\", \"fork_end\", \"read_id\",\n  \"read_start\", \"read_end\", \"strand\",\n  \"fork_length\", \"score\"\n)\ncolnames(origin_df) <- colnames(termination_df) <- c(\"chrom\", \"fork_start\", \"fork_end\", \"read_id\", \"read_start\", \"read_end\", \"strand\")\n\n# Merge left and right forks\nmerged_df <- rbind(left_df, right_df)\n\n# Extract read IDs\nmerged_ids <- unique(trimws(as.character(merged_df$read_id)))\nexclude_ids <- unique(trimws(as.character(c(origin_df$read_id, termination_df$read_id))))\n\n# Filter out excluded read IDs\nfiltered_ids <- setdiff(merged_ids, exclude_ids)\n\nfiltered_df_Aux <- merged_df |>\n  filter(read_id %in% filtered_ids)\n\n# Optional: Exclude reads with score == -3\nfiltered_df_Aux <- filtered_df_Aux |> \n  filter(score != -3.000000)\n\nfiltered_df_NT <- as.data.frame(filtered_df_NT)\nfiltered_df_Aux <- as.data.frame(filtered_df_Aux)\n\n# Viewing the filtered dataframes\nglimpse(filtered_df_NT)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 166\nColumns: 9\n$ chrom       <chr> \"chr1\", \"chr1\", \"chr1\", \"chr1\", \"chr1\", \"chr1\", \"chr1\", \"c…\n$ fork_start  <dbl> 1325962, 5853908, 11261820, 104445678, 169175860, 17758184…\n$ fork_end    <dbl> 1332304, 5863452, 11274951, 104451816, 169189462, 17760261…\n$ read_id     <chr> \"64d3f3d8-4f2f-4c03-ad7d-f3268d7e47ac\", \"8e3a55a6-a88c-4c4…\n$ read_start  <dbl> 1310499, 5839126, 11252034, 104429126, 169154802, 17756058…\n$ read_end    <dbl> 1357925, 5869143, 11326927, 104464577, 169209614, 17761424…\n$ strand      <chr> \"rev\", \"rev\", \"rev\", \"fwd\", \"fwd\", \"rev\", \"rev\", \"rev\", \"r…\n$ fork_length <dbl> 6306, 9555, 13098, 6140, 13472, 20531, 15511, 14073, 9069,…\n$ score       <dbl> 0.761731, 0.060901, 0.442901, 0.143650, 0.626286, 0.323392…\n```\n\n\n:::\n\n```{.r .cell-code}\nglimpse(filtered_df_Aux)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 145\nColumns: 9\n$ chrom       <chr> \"chr1\", \"chr1\", \"chr1\", \"chr10\", \"chr10\", \"chr10\", \"chr11\"…\n$ fork_start  <dbl> 42555757, 74913117, 88048670, 5107329, 35278521, 101796909…\n$ fork_end    <dbl> 42567801, 74938602, 88069287, 5127677, 35289612, 101811662…\n$ read_id     <chr> \"b12f510a-f17b-40b7-97ab-cafe779352a3\", \"832eb7fc-dea3-468…\n$ read_start  <dbl> 42523710, 74885160, 88000876, 5072168, 35242164, 101772252…\n$ read_end    <dbl> 42622859, 74961619, 88162060, 5140342, 35308086, 101813531…\n$ strand      <chr> \"rev\", \"fwd\", \"rev\", \"fwd\", \"rev\", \"rev\", \"fwd\", \"rev\", \"f…\n$ fork_length <dbl> 11948, 25421, 20462, 20119, 10989, 14510, 20322, 10766, 13…\n$ score       <dbl> 0.092489, 0.056514, 0.222898, 0.083192, 0.149709, 0.359784…\n```\n\n\n:::\n\n```{.r .cell-code}\n# Saving the filtered bedfiles for future use\nwrite_tsv(filtered_df_NT, \n            here(\"projects\", \"data\",\"bedfiles\", \"NT\", \"final_filtered.bed\"))\nwrite_tsv(filtered_df_Aux, \n            here(\"projects\", \"data\",\"bedfiles\", \"Auxin\", \"final_filtered.bed\"))\n```\n:::\n\n\n\n### Plotting the Data\n\nWe are going to now see how the '.bedgraph' files look. I am going to first make an aggregate plot of them (one for each of the samples).\n\nTo start, we will need the help of a few user-defined functions. We will call them helper functions. These functions will have multiple input parameters, and at the same time they will return somethings as they are called..\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_bedgraph_tracks <- function(directory) {\n  filenames <- list.files(path = directory, pattern = \".bedgraph\")\n  dataframes <- lapply(file.path(directory, filenames), read.table)\n  names(dataframes) <- filenames\n  basenames <- gsub(\".*__\", \"\", filenames)\n\n  brdu_edu_df_list <- lapply(basenames, function(base) {\n    brdu <- dataframes[[paste0(\"BrdU__\", base)]]\n    edu  <- dataframes[[paste0(\"EdU__\",  base)]]\n    df <- data.frame(\n      brdu[, 1:3],\n      BrdU = brdu[, 4],\n      EdU  = edu[, 4],\n      diff = brdu[, 4] - edu[, 4],\n      id = base\n    )\n    colnames(df) <- c(\"chromosome\", \"start\", \"end\", \"BrdU\", \"EdU\", \"diff\", \"read_ID\")\n    return(df)\n  })\n\n  return(brdu_edu_df_list)\n}\n\nalign_diff_by_minimum <- function(df, window_size = 500) {\n  df$diff_roll <- zoo::rollmean(df$diff, k = window_size, fill = NA, align = \"center\")\n  min_start <- df$start[which.min(df$diff_roll)]\n  max_start <- df$start[which.max(df$diff_roll)]\n  if (min_start > max_start) df$start <- rev(df$start)\n  min_start <- df$start[which.min(df$diff_roll)]\n  df$x <- df$start - min_start\n  return(df)\n}\n\nsummarize_combined_tracks <- function(combined_df) {\n  combined_df |>\n    group_by(x) |>\n    summarise(\n      median_diff = median(diff, na.rm = TRUE),\n      mean        = mean(diff,   na.rm = TRUE),\n      sd          = sd(diff,     na.rm = TRUE),\n      n           = sum(!is.na(diff)),\n      se          = sd / sqrt(n),\n      ci_lower    = mean - 1.96 * se,\n      ci_upper    = mean + 1.96 * se,\n      .groups     = \"drop\"\n    )\n}\n\ndetect_signal_boundaries <- function(summary_df) {\n  roll_medians <- zoo::rollmedian(summary_df$median_diff, k = 151, align = \"left\", na.pad = TRUE)\n\n  edu_start_idx <- which(roll_medians <= -0.1 & summary_df$x > -20000)\n  edu_start     <- if (length(edu_start_idx) > 0) summary_df$x[min(edu_start_idx)] else NA\n\n  brdu_start <- NA\n  if (!is.na(edu_start)) {\n    idx_range     <- which(summary_df$x > 0)\n    above_zero    <- idx_range[roll_medians[idx_range] > 0]\n    if (length(above_zero) > 0) brdu_start <- summary_df$x[above_zero[1]]\n  }\n\n  brdu_end <- NA\n  if (!is.na(brdu_start)) {\n    brdu_max_idx <- which.max(summary_df$x)\n    later_range  <- which(summary_df$x > brdu_max_idx)\n    below_thresh <- later_range[roll_medians[later_range] <= 0.5]\n    if (length(below_thresh) > 0) brdu_end <- summary_df$x[below_thresh[1]]\n  }\n\n  summary_df$edu_start   <- edu_start\n  summary_df$brdu_start  <- brdu_start\n  summary_df$brdu_end    <- brdu_end\n  return(summary_df)\n}\n\nmake_aggregate_plot_df <- function(bedgraph_directory, sample_name) {\n  replication_tracks <- read_bedgraph_tracks(bedgraph_directory)\n  aligned            <- lapply(replication_tracks, align_diff_by_minimum)\n  aligned_named      <- lapply(seq_along(aligned), function(i) {\n    df <- aligned[[i]]\n    df$id <- i\n    df\n  })\n\n  combined_df <- do.call(rbind, aligned_named)\n  summary_df  <- summarize_combined_tracks(combined_df)\n  summary_df  <- summary_df[summary_df$x >= -40000 & summary_df$x <= 60000, ]\n  summary_df$sample_name <- sample_name\n  summary_df  <- detect_signal_boundaries(summary_df)\n  return(summary_df)\n}\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_dir <- here(\"projects\", \"data/bedgraphs\")\n\n# List your sample names\nsample_names <- c(\"NT\", \"Auxin\")\n\n# Load and annotate each sample's data\nsummary_all <- map_dfr(sample_names, function(sample_name) {\n  df <- make_aggregate_plot_df(file.path(data_dir, sample_name), sample_name)\n  df$sample_name <- factor(sample_name, levels = sample_names)\n  \n  # Also add the boundaries as columns (repeated per row)\n  boundaries <- df[1, c(\"edu_start\", \"brdu_start\", \"brdu_end\")]\n  df$edu_start <- boundaries$edu_start\n  df$brdu_start <- boundaries$brdu_start\n  df$brdu_end <- boundaries$brdu_end\n  \n  return(df)\n})\n\n# Plot with facet wrap\nsummary_all |>\n  ggplot(aes(x = x, y = median_diff)) +\n  geom_line(color = \"blue\") +\n  #geom_smooth(method = \"loess\", span = 0.2, se = TRUE, color = \"lightblue\") +\n  geom_vline(aes(xintercept = edu_start), linetype = \"dashed\", color = \"purple\") +\n  geom_vline(aes(xintercept = brdu_start), linetype = \"dashed\", color = \"darkgreen\") +\n  geom_vline(aes(xintercept = brdu_end), linetype = \"dashed\", color = \"darkred\") +\n  geom_text(aes(x = edu_start, y = 0.5, label = round(edu_start)), angle = 45, vjust = -0.5, color = \"purple\") +\n  geom_text(aes(x = brdu_start, y = 0.5, label = round(brdu_start)), angle = 45, vjust = -0.5, color = \"darkgreen\") +\n  geom_text(aes(x = brdu_end, y = -0.5, label = round(brdu_end)), angle = 45, vjust = -0.5, color = \"darkred\") +\n  labs(title = \"Aggregate BrdU - EdU signal\", x = \"Relative Position (bp)\", y = \"Median Δ signal (BrdU-EdU)\") +\n  facet_grid(sample_name ~.) +\n  theme_cowplot()\n```\n\n::: {.cell-output-display}\n![](project_title_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\nNow, I want to have the data of each track.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_each_track <- function(bedgraph_dir, sample_names){\n  paired_tracks\n}\n```\n:::\n",
    "supporting": [
      "project_title_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}