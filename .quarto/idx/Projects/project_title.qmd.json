{"title":"Analysis of DNA Replication Tracks","markdown":{"yaml":{"title":"Analysis of DNA Replication Tracks","date":"2025-07-26","author":"Krishanu Dhar","editor_options":{"chunk_output_type":"console"},"format":{"html":"default"}},"headingText":"Description","containsRefs":false,"markdown":"\n\n\nThis quarto document summarizes and analyzes **DNA replication track** data outputted from a Snakemake Pipeline \\[[Link](https://github.com/SansamLab-Pipelines-Genomics/ReplisomeTracer)\\]. Here, I will *filter and tidy the data*, then *plot it* out independently, as well as comparitively. Further I will try to *predict labeling states* within each sample. If the model doesn't look as robust as I expected, I will *use my own algorithm to predict the states*.\n\n### About the Data\n\nThere are a couple of things that we should know about the data that we are going to use for the upcoming analyses.\n\n-   First, we have bedfiles, which consist of *read IDs and their metadata*. These read IDs are unique, because these have DNA replication footprints. These footprints actually look pretty colorful (will see them in just a few moments). To better understand, here is snap of the workflow:\n\n    ![](/projects/pictures/Workflow_Rep.png){width=\"55.6cm\"}\n\n    ### Loading the packages\n\n    ```{r}\n    #| echo: true\n    #| message: false\n    #| warning: false\n    library(here)\n    library(tidyverse)\n    library(cowplot)\n    library(zoo)\n    cat(\"Working from:\", here::here(), \"\\n\")\n    ```\n\n    Let's have a glimpse at one of the bedfiles I mentioned above:\n\n    ```{r}\n    #| message: false\n    #| warning: false\n\n    try_bed <- read_table(\n      here(\"projects\", \"data\", \"bedfiles\", \"NT\", \"leftForks_DNAscent_forkSense.bed\"),\n      comment = \"#\",\n      col_names = FALSE\n    )\n\n    options(readr.show_col_types = FALSE)\n    # Quick look\n    glimpse(try_bed)\n\n    # Assign proper column names\n    colnames(try_bed) <- c(\n      \"chrom\", \"fork_start\", \"fork_end\", \"read_id\",\n      \"read_start\", \"read_end\", \"strand\",\n      \"fork_length\", \"score\"\n    )\n\n    glimpse(try_bed)\n    ```\n\n-   Second, we have multiple bedgraph files. Each read ID is associated with two bedgraph files (one for EdU and one for BrdU). Let's look at a pair of bedgraphs for a read ID.\n\n    ```{r}\n    #| echo: true\n    brdu_bed <- read_tsv(\n      here(\"projects\", \"data\", \"bedgraphs\", \"NT\", \"BrdU__0b9d33df-6203-4c55-9ac5-c20ce628dde9.bedgraph\")\n    )\n    edu_bed <- read_tsv(\n      here(\"projects\", \"data\", \"bedgraphs\", \"NT\", \"EdU__0b9d33df-6203-4c55-9ac5-c20ce628dde9.bedgraph\")\n    )\n\n    # Assigning column names\n    colnames(edu_bed) <- c(\"chrom\", \"start\", \"end\", \"prob_score\")\n    colnames(brdu_bed) <- c(\"chrom\", \"start\", \"end\", \"prob_score\")\n    head(brdu_bed)\n    head(edu_bed)\n    ```\n\nYou might have guessed it from this. These bedgraphs hold information for the probability score of EdU/BrdU (thymidine analogs) across the entire read for every 100 base pairs (bin size).\n\n## \n\n## Workflow\n\n1.  Organize and tidy the data for better clarity.\n\n2.  Plot the data\n\n3.  Try predicting the labeling states within each sample, and find out their transition points\n\n### [Organizing and tidying our data]{.underline}\n\n```{r}\n# ===Non-treated Sample (NT)===\nleft_df <- read_table(\n  here(\"projects\", \"data\", \"bedfiles\", \"NT\", \"leftForks_DNAscent_forkSense.bed\"),\n  comment = \"#\",\n  col_names = FALSE\n)\nright_df <- read_table(\n  here(\"projects\", \"data\", \"bedfiles\", \"NT\", \"rightForks_DNAscent_forkSense.bed\"),\n  comment = \"#\",\n  col_names = FALSE\n)\norigin_df <- read_table(\n  here(\"projects\", \"data\", \"bedfiles\", \"NT\", \"origins_DNAscent_forkSense.bed\"),\n  comment = \"#\",\n  col_names = FALSE\n)\ntermination_df <- read_table(\n  here(\"projects\", \"data\", \"bedfiles\", \"NT\", \"terminations_DNAscent_forkSense.bed\"),\n  comment = \"#\",\n  col_names = FALSE\n)\n# Set column names (Origins and Terminations have different structure)\ncolnames(left_df) <- colnames(right_df) <- c(\n  \"chrom\", \"fork_start\", \"fork_end\", \"read_id\",\n  \"read_start\", \"read_end\", \"strand\",\n  \"fork_length\", \"score\"\n)\ncolnames(origin_df) <- colnames(termination_df) <- c(\"chrom\", \"fork_start\", \"fork_end\", \"read_id\", \"read_start\", \"read_end\", \"strand\")\n\n# Merge left and right forks\nmerged_df <- rbind(left_df, right_df)\n\n# Extract read IDs\nmerged_ids <- unique(trimws(as.character(merged_df$read_id)))\nexclude_ids <- unique(trimws(as.character(c(origin_df$read_id, termination_df$read_id))))\n\n# Filter out excluded read IDs\nfiltered_ids <- setdiff(merged_ids, exclude_ids)\n\nfiltered_df_NT <- merged_df |>\n  filter(read_id %in% filtered_ids)\n\n# Optional: Exclude reads with score == -3\nfiltered_df_NT <- filtered_df_NT |> \n  filter(score != -3.000000)\n\n# ===Treated sample (Auxin)===\n\nleft_df <- read_table(\n  here(\"projects\", \"data\", \"bedfiles\", \"Auxin\", \"leftForks_DNAscent_forkSense.bed\"),\n  comment = \"#\",\n  col_names = FALSE\n)\nright_df <- read_table(\n  here(\"projects\", \"data\", \"bedfiles\", \"Auxin\", \"rightForks_DNAscent_forkSense.bed\"),\n  comment = \"#\",\n  col_names = FALSE\n)\norigin_df <- read_table(\n  here(\"projects\", \"data\", \"bedfiles\", \"Auxin\", \"origins_DNAscent_forkSense.bed\"),\n  comment = \"#\",\n  col_names = FALSE\n)\ntermination_df <- read_table(\n  here(\"projects\", \"data\", \"bedfiles\", \"Auxin\", \"terminations_DNAscent_forkSense.bed\"),\n  comment = \"#\",\n  col_names = FALSE\n)\n# Set column names (Origins and Terminations have different structure)\ncolnames(left_df) <- colnames(right_df) <- c(\n  \"chrom\", \"fork_start\", \"fork_end\", \"read_id\",\n  \"read_start\", \"read_end\", \"strand\",\n  \"fork_length\", \"score\"\n)\ncolnames(origin_df) <- colnames(termination_df) <- c(\"chrom\", \"fork_start\", \"fork_end\", \"read_id\", \"read_start\", \"read_end\", \"strand\")\n\n# Merge left and right forks\nmerged_df <- rbind(left_df, right_df)\n\n# Extract read IDs\nmerged_ids <- unique(trimws(as.character(merged_df$read_id)))\nexclude_ids <- unique(trimws(as.character(c(origin_df$read_id, termination_df$read_id))))\n\n# Filter out excluded read IDs\nfiltered_ids <- setdiff(merged_ids, exclude_ids)\n\nfiltered_df_Aux <- merged_df |>\n  filter(read_id %in% filtered_ids)\n\n# Optional: Exclude reads with score == -3\nfiltered_df_Aux <- filtered_df_Aux |> \n  filter(score != -3.000000)\n\nfiltered_df_NT <- as.data.frame(filtered_df_NT)\nfiltered_df_Aux <- as.data.frame(filtered_df_Aux)\n\n# Viewing the filtered dataframes\nglimpse(filtered_df_NT)\nglimpse(filtered_df_Aux)\n# Saving the filtered bedfiles for future use\nwrite_tsv(filtered_df_NT, \n            here(\"projects\", \"data\",\"bedfiles\", \"NT\", \"final_filtered.bed\"))\nwrite_tsv(filtered_df_Aux, \n            here(\"projects\", \"data\",\"bedfiles\", \"Auxin\", \"final_filtered.bed\"))\n\n```\n\n### Plotting the Data\n\nWe are going to now see how the '.bedgraph' files look. I am going to first make an aggregate plot of them (one for each of the samples).\n\nTo start, we will need the help of a few user-defined functions. We will call them helper functions. These functions will have multiple input parameters, and at the same time they will return somethings as they are called..\n\n```{r}\n\nread_bedgraph_tracks <- function(directory) {\n  filenames <- list.files(path = directory, pattern = \".bedgraph\")\n  dataframes <- lapply(file.path(directory, filenames), read.table)\n  names(dataframes) <- filenames\n  basenames <- gsub(\".*__\", \"\", filenames)\n\n  brdu_edu_df_list <- lapply(basenames, function(base) {\n    brdu <- dataframes[[paste0(\"BrdU__\", base)]]\n    edu  <- dataframes[[paste0(\"EdU__\",  base)]]\n    df <- data.frame(\n      brdu[, 1:3],\n      BrdU = brdu[, 4],\n      EdU  = edu[, 4],\n      diff = brdu[, 4] - edu[, 4],\n      id = base\n    )\n    colnames(df) <- c(\"chromosome\", \"start\", \"end\", \"BrdU\", \"EdU\", \"diff\", \"read_ID\")\n    return(df)\n  })\n\n  return(brdu_edu_df_list)\n}\n\nalign_diff_by_minimum <- function(df, window_size = 500) {\n  df$diff_roll <- zoo::rollmean(df$diff, k = window_size, fill = NA, align = \"center\")\n  min_start <- df$start[which.min(df$diff_roll)]\n  max_start <- df$start[which.max(df$diff_roll)]\n  if (min_start > max_start) df$start <- rev(df$start)\n  min_start <- df$start[which.min(df$diff_roll)]\n  df$x <- df$start - min_start\n  return(df)\n}\n\nsummarize_combined_tracks <- function(combined_df) {\n  combined_df |>\n    group_by(x) |>\n    summarise(\n      median_diff = median(diff, na.rm = TRUE),\n      mean        = mean(diff,   na.rm = TRUE),\n      sd          = sd(diff,     na.rm = TRUE),\n      n           = sum(!is.na(diff)),\n      se          = sd / sqrt(n),\n      ci_lower    = mean - 1.96 * se,\n      ci_upper    = mean + 1.96 * se,\n      .groups     = \"drop\"\n    )\n}\n\ndetect_signal_boundaries <- function(summary_df) {\n  roll_medians <- zoo::rollmedian(summary_df$median_diff, k = 151, align = \"left\", na.pad = TRUE)\n\n  edu_start_idx <- which(roll_medians <= -0.1 & summary_df$x > -20000)\n  edu_start     <- if (length(edu_start_idx) > 0) summary_df$x[min(edu_start_idx)] else NA\n\n  brdu_start <- NA\n  if (!is.na(edu_start)) {\n    idx_range     <- which(summary_df$x > 0)\n    above_zero    <- idx_range[roll_medians[idx_range] > 0]\n    if (length(above_zero) > 0) brdu_start <- summary_df$x[above_zero[1]]\n  }\n\n  brdu_end <- NA\n  if (!is.na(brdu_start)) {\n    brdu_max_idx <- which.max(summary_df$x)\n    later_range  <- which(summary_df$x > brdu_max_idx)\n    below_thresh <- later_range[roll_medians[later_range] <= 0.5]\n    if (length(below_thresh) > 0) brdu_end <- summary_df$x[below_thresh[1]]\n  }\n\n  summary_df$edu_start   <- edu_start\n  summary_df$brdu_start  <- brdu_start\n  summary_df$brdu_end    <- brdu_end\n  return(summary_df)\n}\n\nmake_aggregate_plot_df <- function(bedgraph_directory, sample_name) {\n  replication_tracks <- read_bedgraph_tracks(bedgraph_directory)\n  aligned            <- lapply(replication_tracks, align_diff_by_minimum)\n  aligned_named      <- lapply(seq_along(aligned), function(i) {\n    df <- aligned[[i]]\n    df$id <- i\n    df\n  })\n\n  combined_df <- do.call(rbind, aligned_named)\n  summary_df  <- summarize_combined_tracks(combined_df)\n  summary_df  <- summary_df[summary_df$x >= -40000 & summary_df$x <= 60000, ]\n  summary_df$sample_name <- sample_name\n  summary_df  <- detect_signal_boundaries(summary_df)\n  return(summary_df)\n}\n\n```\n\n```{r}\n#| eval: false\n#| include: false\n\n\n\n# Setting the directory where our input data is\ndata_dir <- here(\"projects\", \"data/bedgraphs/Auxin\")\n\nsample_name <- \"Auxin\"\nsummary_df <- make_aggregate_plot_df(data_dir, sample_name)\nboundaries <- summary_df[1, c(\"edu_start\", \"brdu_start\", \"brdu_end\")]\n\nsummary_df |> \n  ggplot(aes(x = x, y = median_diff)) +\n  geom_smooth(method = \"loess\", span = 0.2, se = TRUE, color = \"lightblue\") +\n  geom_vline(xintercept = boundaries$edu_start,  linetype = \"dashed\", color = \"purple\", show.legend = TRUE) +\n  geom_vline(xintercept = boundaries$brdu_start, linetype = \"dashed\", color = \"darkgreen\") +\n  geom_vline(xintercept = boundaries$brdu_end,   linetype = \"dashed\", color = \"darkred\") +\n  labs(title = \"Aggregate BrdU - EdU signal\", x = \"Relative Position (bp)\", y = \"Median Δ signal (BrdU-EdU)\", color = \"boundaries\") +\n  annotate(\"text\", x = boundaries$edu_start,  y = 0.5, label = round(boundaries$edu_start), color = \"purple\", angle = 45, vjust = -0.5) +\n  annotate(\"text\", x = boundaries$brdu_start, y = 0.5, label = round(boundaries$brdu_start), color = \"darkgreen\",  angle = 45, vjust = -0.5) +\n  annotate(\"text\", x = boundaries$brdu_end,   y = 0.5, label = round(boundaries$brdu_end), color = \"darkred\",    angle = 45, vjust = -0.5) +\n  theme_cowplot()\n\n```\n\n```{r}\ndata_dir <- here(\"projects\", \"data/bedgraphs\")\n\n# List your sample names\nsample_names <- c(\"NT\", \"Auxin\")\n\n# Load and annotate each sample's data\nsummary_all <- map_dfr(sample_names, function(sample_name) {\n  df <- make_aggregate_plot_df(file.path(data_dir, sample_name), sample_name)\n  df$sample_name <- factor(sample_name, levels = sample_names)\n  \n  # Also add the boundaries as columns (repeated per row)\n  boundaries <- df[1, c(\"edu_start\", \"brdu_start\", \"brdu_end\")]\n  df$edu_start <- boundaries$edu_start\n  df$brdu_start <- boundaries$brdu_start\n  df$brdu_end <- boundaries$brdu_end\n  \n  return(df)\n})\n\n# Plot with facet wrap\nsummary_all |>\n  ggplot(aes(x = x, y = median_diff)) +\n  geom_line(color = \"blue\") +\n  #geom_smooth(method = \"loess\", span = 0.2, se = TRUE, color = \"lightblue\") +\n  geom_vline(aes(xintercept = edu_start), linetype = \"dashed\", color = \"purple\") +\n  geom_vline(aes(xintercept = brdu_start), linetype = \"dashed\", color = \"darkgreen\") +\n  geom_vline(aes(xintercept = brdu_end), linetype = \"dashed\", color = \"darkred\") +\n  geom_text(aes(x = edu_start, y = 0.5, label = round(edu_start)), angle = 45, vjust = -0.5, color = \"purple\") +\n  geom_text(aes(x = brdu_start, y = 0.5, label = round(brdu_start)), angle = 45, vjust = -0.5, color = \"darkgreen\") +\n  geom_text(aes(x = brdu_end, y = -0.5, label = round(brdu_end)), angle = 45, vjust = -0.5, color = \"darkred\") +\n  labs(title = \"Aggregate BrdU - EdU signal\", x = \"Relative Position (bp)\", y = \"Median Δ signal (BrdU-EdU)\") +\n  facet_grid(sample_name ~.) +\n  theme_cowplot()\n```\n\nNow, I want to have the data of each track.\n\n```{r}\nplot_each_track <- function(bedgraph_dir, sample_names){\n  paired_tracks\n}\n```\n","srcMarkdownNoYaml":"\n\n## Description\n\nThis quarto document summarizes and analyzes **DNA replication track** data outputted from a Snakemake Pipeline \\[[Link](https://github.com/SansamLab-Pipelines-Genomics/ReplisomeTracer)\\]. Here, I will *filter and tidy the data*, then *plot it* out independently, as well as comparitively. Further I will try to *predict labeling states* within each sample. If the model doesn't look as robust as I expected, I will *use my own algorithm to predict the states*.\n\n### About the Data\n\nThere are a couple of things that we should know about the data that we are going to use for the upcoming analyses.\n\n-   First, we have bedfiles, which consist of *read IDs and their metadata*. These read IDs are unique, because these have DNA replication footprints. These footprints actually look pretty colorful (will see them in just a few moments). To better understand, here is snap of the workflow:\n\n    ![](/projects/pictures/Workflow_Rep.png){width=\"55.6cm\"}\n\n    ### Loading the packages\n\n    ```{r}\n    #| echo: true\n    #| message: false\n    #| warning: false\n    library(here)\n    library(tidyverse)\n    library(cowplot)\n    library(zoo)\n    cat(\"Working from:\", here::here(), \"\\n\")\n    ```\n\n    Let's have a glimpse at one of the bedfiles I mentioned above:\n\n    ```{r}\n    #| message: false\n    #| warning: false\n\n    try_bed <- read_table(\n      here(\"projects\", \"data\", \"bedfiles\", \"NT\", \"leftForks_DNAscent_forkSense.bed\"),\n      comment = \"#\",\n      col_names = FALSE\n    )\n\n    options(readr.show_col_types = FALSE)\n    # Quick look\n    glimpse(try_bed)\n\n    # Assign proper column names\n    colnames(try_bed) <- c(\n      \"chrom\", \"fork_start\", \"fork_end\", \"read_id\",\n      \"read_start\", \"read_end\", \"strand\",\n      \"fork_length\", \"score\"\n    )\n\n    glimpse(try_bed)\n    ```\n\n-   Second, we have multiple bedgraph files. Each read ID is associated with two bedgraph files (one for EdU and one for BrdU). Let's look at a pair of bedgraphs for a read ID.\n\n    ```{r}\n    #| echo: true\n    brdu_bed <- read_tsv(\n      here(\"projects\", \"data\", \"bedgraphs\", \"NT\", \"BrdU__0b9d33df-6203-4c55-9ac5-c20ce628dde9.bedgraph\")\n    )\n    edu_bed <- read_tsv(\n      here(\"projects\", \"data\", \"bedgraphs\", \"NT\", \"EdU__0b9d33df-6203-4c55-9ac5-c20ce628dde9.bedgraph\")\n    )\n\n    # Assigning column names\n    colnames(edu_bed) <- c(\"chrom\", \"start\", \"end\", \"prob_score\")\n    colnames(brdu_bed) <- c(\"chrom\", \"start\", \"end\", \"prob_score\")\n    head(brdu_bed)\n    head(edu_bed)\n    ```\n\nYou might have guessed it from this. These bedgraphs hold information for the probability score of EdU/BrdU (thymidine analogs) across the entire read for every 100 base pairs (bin size).\n\n## \n\n## Workflow\n\n1.  Organize and tidy the data for better clarity.\n\n2.  Plot the data\n\n3.  Try predicting the labeling states within each sample, and find out their transition points\n\n### [Organizing and tidying our data]{.underline}\n\n```{r}\n# ===Non-treated Sample (NT)===\nleft_df <- read_table(\n  here(\"projects\", \"data\", \"bedfiles\", \"NT\", \"leftForks_DNAscent_forkSense.bed\"),\n  comment = \"#\",\n  col_names = FALSE\n)\nright_df <- read_table(\n  here(\"projects\", \"data\", \"bedfiles\", \"NT\", \"rightForks_DNAscent_forkSense.bed\"),\n  comment = \"#\",\n  col_names = FALSE\n)\norigin_df <- read_table(\n  here(\"projects\", \"data\", \"bedfiles\", \"NT\", \"origins_DNAscent_forkSense.bed\"),\n  comment = \"#\",\n  col_names = FALSE\n)\ntermination_df <- read_table(\n  here(\"projects\", \"data\", \"bedfiles\", \"NT\", \"terminations_DNAscent_forkSense.bed\"),\n  comment = \"#\",\n  col_names = FALSE\n)\n# Set column names (Origins and Terminations have different structure)\ncolnames(left_df) <- colnames(right_df) <- c(\n  \"chrom\", \"fork_start\", \"fork_end\", \"read_id\",\n  \"read_start\", \"read_end\", \"strand\",\n  \"fork_length\", \"score\"\n)\ncolnames(origin_df) <- colnames(termination_df) <- c(\"chrom\", \"fork_start\", \"fork_end\", \"read_id\", \"read_start\", \"read_end\", \"strand\")\n\n# Merge left and right forks\nmerged_df <- rbind(left_df, right_df)\n\n# Extract read IDs\nmerged_ids <- unique(trimws(as.character(merged_df$read_id)))\nexclude_ids <- unique(trimws(as.character(c(origin_df$read_id, termination_df$read_id))))\n\n# Filter out excluded read IDs\nfiltered_ids <- setdiff(merged_ids, exclude_ids)\n\nfiltered_df_NT <- merged_df |>\n  filter(read_id %in% filtered_ids)\n\n# Optional: Exclude reads with score == -3\nfiltered_df_NT <- filtered_df_NT |> \n  filter(score != -3.000000)\n\n# ===Treated sample (Auxin)===\n\nleft_df <- read_table(\n  here(\"projects\", \"data\", \"bedfiles\", \"Auxin\", \"leftForks_DNAscent_forkSense.bed\"),\n  comment = \"#\",\n  col_names = FALSE\n)\nright_df <- read_table(\n  here(\"projects\", \"data\", \"bedfiles\", \"Auxin\", \"rightForks_DNAscent_forkSense.bed\"),\n  comment = \"#\",\n  col_names = FALSE\n)\norigin_df <- read_table(\n  here(\"projects\", \"data\", \"bedfiles\", \"Auxin\", \"origins_DNAscent_forkSense.bed\"),\n  comment = \"#\",\n  col_names = FALSE\n)\ntermination_df <- read_table(\n  here(\"projects\", \"data\", \"bedfiles\", \"Auxin\", \"terminations_DNAscent_forkSense.bed\"),\n  comment = \"#\",\n  col_names = FALSE\n)\n# Set column names (Origins and Terminations have different structure)\ncolnames(left_df) <- colnames(right_df) <- c(\n  \"chrom\", \"fork_start\", \"fork_end\", \"read_id\",\n  \"read_start\", \"read_end\", \"strand\",\n  \"fork_length\", \"score\"\n)\ncolnames(origin_df) <- colnames(termination_df) <- c(\"chrom\", \"fork_start\", \"fork_end\", \"read_id\", \"read_start\", \"read_end\", \"strand\")\n\n# Merge left and right forks\nmerged_df <- rbind(left_df, right_df)\n\n# Extract read IDs\nmerged_ids <- unique(trimws(as.character(merged_df$read_id)))\nexclude_ids <- unique(trimws(as.character(c(origin_df$read_id, termination_df$read_id))))\n\n# Filter out excluded read IDs\nfiltered_ids <- setdiff(merged_ids, exclude_ids)\n\nfiltered_df_Aux <- merged_df |>\n  filter(read_id %in% filtered_ids)\n\n# Optional: Exclude reads with score == -3\nfiltered_df_Aux <- filtered_df_Aux |> \n  filter(score != -3.000000)\n\nfiltered_df_NT <- as.data.frame(filtered_df_NT)\nfiltered_df_Aux <- as.data.frame(filtered_df_Aux)\n\n# Viewing the filtered dataframes\nglimpse(filtered_df_NT)\nglimpse(filtered_df_Aux)\n# Saving the filtered bedfiles for future use\nwrite_tsv(filtered_df_NT, \n            here(\"projects\", \"data\",\"bedfiles\", \"NT\", \"final_filtered.bed\"))\nwrite_tsv(filtered_df_Aux, \n            here(\"projects\", \"data\",\"bedfiles\", \"Auxin\", \"final_filtered.bed\"))\n\n```\n\n### Plotting the Data\n\nWe are going to now see how the '.bedgraph' files look. I am going to first make an aggregate plot of them (one for each of the samples).\n\nTo start, we will need the help of a few user-defined functions. We will call them helper functions. These functions will have multiple input parameters, and at the same time they will return somethings as they are called..\n\n```{r}\n\nread_bedgraph_tracks <- function(directory) {\n  filenames <- list.files(path = directory, pattern = \".bedgraph\")\n  dataframes <- lapply(file.path(directory, filenames), read.table)\n  names(dataframes) <- filenames\n  basenames <- gsub(\".*__\", \"\", filenames)\n\n  brdu_edu_df_list <- lapply(basenames, function(base) {\n    brdu <- dataframes[[paste0(\"BrdU__\", base)]]\n    edu  <- dataframes[[paste0(\"EdU__\",  base)]]\n    df <- data.frame(\n      brdu[, 1:3],\n      BrdU = brdu[, 4],\n      EdU  = edu[, 4],\n      diff = brdu[, 4] - edu[, 4],\n      id = base\n    )\n    colnames(df) <- c(\"chromosome\", \"start\", \"end\", \"BrdU\", \"EdU\", \"diff\", \"read_ID\")\n    return(df)\n  })\n\n  return(brdu_edu_df_list)\n}\n\nalign_diff_by_minimum <- function(df, window_size = 500) {\n  df$diff_roll <- zoo::rollmean(df$diff, k = window_size, fill = NA, align = \"center\")\n  min_start <- df$start[which.min(df$diff_roll)]\n  max_start <- df$start[which.max(df$diff_roll)]\n  if (min_start > max_start) df$start <- rev(df$start)\n  min_start <- df$start[which.min(df$diff_roll)]\n  df$x <- df$start - min_start\n  return(df)\n}\n\nsummarize_combined_tracks <- function(combined_df) {\n  combined_df |>\n    group_by(x) |>\n    summarise(\n      median_diff = median(diff, na.rm = TRUE),\n      mean        = mean(diff,   na.rm = TRUE),\n      sd          = sd(diff,     na.rm = TRUE),\n      n           = sum(!is.na(diff)),\n      se          = sd / sqrt(n),\n      ci_lower    = mean - 1.96 * se,\n      ci_upper    = mean + 1.96 * se,\n      .groups     = \"drop\"\n    )\n}\n\ndetect_signal_boundaries <- function(summary_df) {\n  roll_medians <- zoo::rollmedian(summary_df$median_diff, k = 151, align = \"left\", na.pad = TRUE)\n\n  edu_start_idx <- which(roll_medians <= -0.1 & summary_df$x > -20000)\n  edu_start     <- if (length(edu_start_idx) > 0) summary_df$x[min(edu_start_idx)] else NA\n\n  brdu_start <- NA\n  if (!is.na(edu_start)) {\n    idx_range     <- which(summary_df$x > 0)\n    above_zero    <- idx_range[roll_medians[idx_range] > 0]\n    if (length(above_zero) > 0) brdu_start <- summary_df$x[above_zero[1]]\n  }\n\n  brdu_end <- NA\n  if (!is.na(brdu_start)) {\n    brdu_max_idx <- which.max(summary_df$x)\n    later_range  <- which(summary_df$x > brdu_max_idx)\n    below_thresh <- later_range[roll_medians[later_range] <= 0.5]\n    if (length(below_thresh) > 0) brdu_end <- summary_df$x[below_thresh[1]]\n  }\n\n  summary_df$edu_start   <- edu_start\n  summary_df$brdu_start  <- brdu_start\n  summary_df$brdu_end    <- brdu_end\n  return(summary_df)\n}\n\nmake_aggregate_plot_df <- function(bedgraph_directory, sample_name) {\n  replication_tracks <- read_bedgraph_tracks(bedgraph_directory)\n  aligned            <- lapply(replication_tracks, align_diff_by_minimum)\n  aligned_named      <- lapply(seq_along(aligned), function(i) {\n    df <- aligned[[i]]\n    df$id <- i\n    df\n  })\n\n  combined_df <- do.call(rbind, aligned_named)\n  summary_df  <- summarize_combined_tracks(combined_df)\n  summary_df  <- summary_df[summary_df$x >= -40000 & summary_df$x <= 60000, ]\n  summary_df$sample_name <- sample_name\n  summary_df  <- detect_signal_boundaries(summary_df)\n  return(summary_df)\n}\n\n```\n\n```{r}\n#| eval: false\n#| include: false\n\n\n\n# Setting the directory where our input data is\ndata_dir <- here(\"projects\", \"data/bedgraphs/Auxin\")\n\nsample_name <- \"Auxin\"\nsummary_df <- make_aggregate_plot_df(data_dir, sample_name)\nboundaries <- summary_df[1, c(\"edu_start\", \"brdu_start\", \"brdu_end\")]\n\nsummary_df |> \n  ggplot(aes(x = x, y = median_diff)) +\n  geom_smooth(method = \"loess\", span = 0.2, se = TRUE, color = \"lightblue\") +\n  geom_vline(xintercept = boundaries$edu_start,  linetype = \"dashed\", color = \"purple\", show.legend = TRUE) +\n  geom_vline(xintercept = boundaries$brdu_start, linetype = \"dashed\", color = \"darkgreen\") +\n  geom_vline(xintercept = boundaries$brdu_end,   linetype = \"dashed\", color = \"darkred\") +\n  labs(title = \"Aggregate BrdU - EdU signal\", x = \"Relative Position (bp)\", y = \"Median Δ signal (BrdU-EdU)\", color = \"boundaries\") +\n  annotate(\"text\", x = boundaries$edu_start,  y = 0.5, label = round(boundaries$edu_start), color = \"purple\", angle = 45, vjust = -0.5) +\n  annotate(\"text\", x = boundaries$brdu_start, y = 0.5, label = round(boundaries$brdu_start), color = \"darkgreen\",  angle = 45, vjust = -0.5) +\n  annotate(\"text\", x = boundaries$brdu_end,   y = 0.5, label = round(boundaries$brdu_end), color = \"darkred\",    angle = 45, vjust = -0.5) +\n  theme_cowplot()\n\n```\n\n```{r}\ndata_dir <- here(\"projects\", \"data/bedgraphs\")\n\n# List your sample names\nsample_names <- c(\"NT\", \"Auxin\")\n\n# Load and annotate each sample's data\nsummary_all <- map_dfr(sample_names, function(sample_name) {\n  df <- make_aggregate_plot_df(file.path(data_dir, sample_name), sample_name)\n  df$sample_name <- factor(sample_name, levels = sample_names)\n  \n  # Also add the boundaries as columns (repeated per row)\n  boundaries <- df[1, c(\"edu_start\", \"brdu_start\", \"brdu_end\")]\n  df$edu_start <- boundaries$edu_start\n  df$brdu_start <- boundaries$brdu_start\n  df$brdu_end <- boundaries$brdu_end\n  \n  return(df)\n})\n\n# Plot with facet wrap\nsummary_all |>\n  ggplot(aes(x = x, y = median_diff)) +\n  geom_line(color = \"blue\") +\n  #geom_smooth(method = \"loess\", span = 0.2, se = TRUE, color = \"lightblue\") +\n  geom_vline(aes(xintercept = edu_start), linetype = \"dashed\", color = \"purple\") +\n  geom_vline(aes(xintercept = brdu_start), linetype = \"dashed\", color = \"darkgreen\") +\n  geom_vline(aes(xintercept = brdu_end), linetype = \"dashed\", color = \"darkred\") +\n  geom_text(aes(x = edu_start, y = 0.5, label = round(edu_start)), angle = 45, vjust = -0.5, color = \"purple\") +\n  geom_text(aes(x = brdu_start, y = 0.5, label = round(brdu_start)), angle = 45, vjust = -0.5, color = \"darkgreen\") +\n  geom_text(aes(x = brdu_end, y = -0.5, label = round(brdu_end)), angle = 45, vjust = -0.5, color = \"darkred\") +\n  labs(title = \"Aggregate BrdU - EdU signal\", x = \"Relative Position (bp)\", y = \"Median Δ signal (BrdU-EdU)\") +\n  facet_grid(sample_name ~.) +\n  theme_cowplot()\n```\n\nNow, I want to have the data of each track.\n\n```{r}\nplot_each_track <- function(bedgraph_dir, sample_names){\n  paired_tracks\n}\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"project_title.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","theme":"../styles.scss","title":"Analysis of DNA Replication Tracks","date":"2025-07-26","author":"Krishanu Dhar","editor_options":{"chunk_output_type":"console"}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}